# This is an application to connect, update, register, test and flash
# a particle.io board.
#
# See the device (dev) and particle (pb) modules for more information.



# set the automatic execution to do what we want.
# Make sure our with stack has everything we need.
# But we only want that once.
with /config/exec

'
autoexec: pioe/processit
hooks:
    startup:
    - pioe/initialize



pop-with

# Set up the data
# Most of this was stolen from the defaults already defined
# by device and particle. Modify as needed.
# if output from the device matches on do_qqc_regex, then
#
# do something function, an input dialog, is provided by device.
# The result is sent back to the device which should be waiting.
# in this case, to get input for and send back the serial number.
#
# help dev/handshake for more information.
#
# Serial has it's own regex and input prompt which will be used for this.
#
# Set the image names to the names of the binaries you have and wish
# to use for the test and final flash, and optionally tinker if you have one.
#
# Product is used for product registration with particle.io.
#
# Two complete processes are provided, one with and one without dialogs
# which prompt ready at various steps.
# The default interactive behavior is to loop with begin, end, and again dialogs.


with /config

'
R5Setup:
  handshake:
    do_qqc_func: pioe/do_something
    do_qqc_regex: ^I:Now Setting Serial Number
    done_regex: ^I:Test All Done
    fail_regex: ^F:.*
    init_string: 'R5 Test'
    response_string: '!'
  serial:
    input_please: Please input an 8 digit serial number
    input_regex: ^\d{8}$

  images:
    flash: R5Bin.bin
    test: R5Test.bin
    tinker: tinker-0.8.0-rc.27-boron.bin
  product: XXXXX

  yn_fail_msg : 'Please verify the test image is shown on the screen.'
  title: 'R5 Setup'

help:
  pioe-help:
    R5 Setup

    This is a couple of processes to identify, update, register, test and flash
    the R5 project which is based on a particle.io Boron.

    The crucial bits are the data and a helper function that the test handshake
    will call to ask about the device's display and get a serial number, which
    is then sent to the device as a bytestream. See 'help dev/handshake'.

    Setting up the data need only be done once and is done with the pioe/initialize
    function. This will build a _with_ stack which contains all the necessary
    default data for both the device and particle modules. The initialization
    is set as a startup hook when this module is autoloaded by SPR.

    Essentially, run SPR in this
    folder containing SPRConfig.yaml so that this file, T5.spr, is autoloaded
    then startup hooks will be set in time to run.

    The top _with_ path is /device and will contain all the data as the process
    progresses. It can be reset with pio/clear.

    It should be reasonable to add more projects here, simply by creating
    another folder of data over-rides similar to /config/R5Setup.
    A different with, and this process could be good to go.

    * 'Show /config/R5Setup', to see all of the data over-rides provided.
    * 'Show' will give the current _with_ which holds the device data.
    * ls-with will reveal the with stack, and as/flat-with will show
    the ultimate value of everything defined within that stack.




pop-with

# namespace for extra particle io board stuff.
new-ns pioe "A few extra particle io board functions" Particle.io-extras.

def help
    "Help for the pioe / R5 particle board extras."
    '
    - log/info ~/config/help/pioe-help
    - log/info " "
    - show /config/R5Setup



def initialize
    "Setup the with stack for the R5."
    - pio/initialize
    - with /config/R5Setup
    - with /device



def tonce
    "Initialize and test once, if not using autoload startup hooks,
    do this the first time and pioe/test from then on."
    '
    - pio/initialize
    - pioe/test



def test
    "just enough to plugin and run a test once, sans initialize."
    '
    - pio/clear
    - pio/get
    - pio/testit



def do_something
    "Function to ask about the display, and get a serial number.
    dev/handshake will call this and then retrieve the result
    and send it as a byte string to the device."
    '
    - ui/yno-fail
    - ui/-input-string



def processit
    "Process a particle.io board, no dialogs other than those provided by SPR.
    or the particle board functions."
    '
    - pio/clear
    - pio/id-it
    - pio/setup
    - pio/add
    - dev/wait
    - pio/testit
    - pio/flash
    - as/archive-log



def processit-with-dialogs
    "Process a particle.io board, more 'ready' dialogs."
    '
    - pio/clear
    - ui/dialog-start
    - pio/id-it
    - pio/setup
    - pio/add
    - dev/wait
    - ui/dialog-test
    - pio/testit
    - ui/dialog-flash
    - pio/flash
    - as/archive-log
