'
config:
    particle:
        product    : 'XXXXX'

        images:
            #flash   : '../boron-system-part1@2.0.1.bin'
            flash   : 'R5Bin.bin'
            test    : 'R5Test.bin'
            tinker  : 'tinker-0.8.0-rc.27-boron.bin'

device:
  id: ''
  last_id: ''
  type: ''
  serial: ''
  name: ''
  path: ''



def init_with
    "Set up the with stack so we get our stuff."
'
- with /config/device/serial
- with /config/device/waiting
- with /config/device/handshake
- with /config/particle
- with /device



def inspect
    "Inspect the particle device"
    pb/do_pcmd "serial inspect"

def login
    "Login to particle cloud from the cli prompt"
    os/system "particle cloud login"

def logout
    "Logout of particle cloud, clean up tokens."
    os/system "particle cloud logout"

def flash_image
    "Flash the default flash image"
    pb/flash /config/particle/images/flash

def flash_tinker
    "Flash the default tinker image"
    pb/flash /config/particle/images/tinker

def flash_test
    "Flash the defaul test image"
    pb/flash /config/particle/images/test

def list-w-timeout
    "Do a serial list, trying repeatedly on failure for a timeout period"
     pb/-list-usb-w-timeout
#    with /config/device/waiting pb/-list-usb-w-timeout


# partial release
#     "Release the claim on a device"
#     pb/do_id_pcmd  "device remove"

# partial cloud_status
#     "Check the cloud-status of the device."
#     pb/do_id_pcmd "usb cloud-status"

# partial reset_usb
#     "Reset the device on the usb for the given device id."
#     pb/do_id_pcmd "usb reset"



def _doctor
    "Run particle doctor. (just doctor)"
    pb/do_pcmd "-v doctor"

def doctor
    "Run particle doctor. (list usb, dfu mode then -> doctor)"
    '
    - pb/list_usb
    - pb/dfu_mode
    - pb/_doctor



def update
    "Update the device OS. ie. dfu, update."
    '
    - log/info "Updating device"
    - dfu_mode
    - do_pcmd("update")



def set_setup_bit
    "Mark the setup bit done."
    '
    - pb/do_pcmd "usb setup-done"
    - log/info "Set: Setup-done"




def add
    "Register/claim device with 'particle device add'"
    '
    - log/info "Registering device."
    # particle product add $product_id $device_id
    - pb/do_id_pcmd "device add"



def claim
    "Cloud claim device with 'particle cloud claim'"
    '
    - log/info("Claiming device."
    # particle product add $product_id $device_id
    - pb/do_id_pcmd "cloud claim"





def get_usb_and_id:
    "Retrieve and set the USB device, the board name,  and the device id.
    Uses 'particle serial list' in a timeout loop. This is required
    for most things. Wait and handshake, use the usb device,
    and the id is needed by many things."
    '
    - pb/get_w_timeout /config/waiting/timeout
    - pop _result_ /device



def wait_for_plist
    "Wait for particle serial list to succeed with timeout, doesn't
    really work."
# we don't care about the results, just to wait.
    pb/-get-w-timeout


# Create some steps from the parts to compose into a process.

def id-it
    "Id the board. get, reset then identify. Need the reset and pauses for consistent success"
    '
    - pb/get
    - pb/reset
    - dev/wait pb/pause pb/pause
    - pb/identify



def ckit
    "Id, and check it over, cloud status and inspect."
    '
    - pb/id-it
    - pb/cloud-status
    - pb/inspect



def nukeit
    "Try to reset the board to a sane state."
    '
    - pb/tinker
    - dev/wait
    - pb/update
    - dev/wait
    - pb/get
    - pb/id-it



def setup
    "Update the os and mark the setup bit done."
    '
    - pb/update
    - dev/wait pb/pause
    - pb/setup-bit-done



def testit
    "flash the test, handshake and process the results."
    '
    - pb/flash-test
    - dev/wait pb/pause
    - dev/handshake



def claimit
    "Do a product add followed by device add."
    '
    - pb/product-add
    - dev/wait
    - pb/add



def claimit-3ways
    "Do a product add, device add, cloud claim."
    '
    - pb/product-add
    - dev/wait
    - pb/add
    - dev/wait
    - claim



def processit
    "This is the whole process, dialogs only at the beginning and end."
    '
    - pb/id-it
    - pb/setup
    - pb/add
    - dev/wait
    - pb/testit
    - pb/flash
    - as/archive-log




def processit-with-dialogs
    "This is the whole process, dialogs everywhere."
    '
    - ui/dialog-start
    - pb/id-it
    - pb/setup
    - pb/add
    - dev/wait
    - ui/dialog-test pb/testit
    - ui/dialog-flash pb/flash
    - as/archive-log
