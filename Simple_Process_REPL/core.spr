'
config:

    _with_ :
       - '/'
    _with_path_       : '/_with_'

    REPL:
        prompt        : 'SPR:> '

    ssh:
        pemfile       : 'server.pem'
        ssh_server    : 'someserver_url'

    files:
        logfile       : 'SPR.log'
        loglevel      : 'debug'

        config_file   : 'SPRConfig.yaml'

    readme:
        module: Simple_Python_REPL
        filename: 'README.md'
        path: ""
        md: ""
        html: ""

    exec:
        # function name to autoexec when asked to run

        autoexec : ui/hello
        autoload : 'SPRConfig.spr'

        # for subcmd, particle uses it.
        # external_cli_prefix: ''

        help:

        # # a list of functions
        functions :
        #     id-it :
        #         fn  : get reset wait pause pause identify
        #         doc : 'Put your help text here'

        hooks:
            startup:

            # - as/show config
            #- cli/msg "Welcome"

            shutdown:
                - log/info "Goodbye have a nice day!"

# end of Yaml


# not necessary. Not sure paths have a use anymore.
# -def-path _results_ "The results stack, Relative to With" results

namespace as "Application State functionality"
    Simple_Process_REPL.appstate
    help
    show
    set_in
    set
    _format
    _get
    get_in_stack
    push
    pop
    swap
    nth
    rest
    reverse
    _with
    get_in_stack
    flat_with
    flatten_with
    clear_path
    eval_default_process
    save
    load
    save_config
    load_config
    load_pkg_resource
    merge_yaml
    sync_functions
    reset_device
    archive_log

namespace cli "User interface using the cli"
    Simple_Process_REPL.cli
    help
    msg
    yes_no

namespace ui "User interface using dialog"
    Simple_Process_REPL.dialog
    help
    msg
    yes_no
    input_count
    _input_string
    input_string
    radiolist
    menu
    yno_fail



namespace shutil "Python shutil library"
    shutil
    copyfile copymode copystat copy copy2 copytree rmtree move
    get_archive_formats register_archive_format unregister_archive_format
    make_archive get_unpack_formats register_unpack_format
    unregister_unpack_format unpack_archive disk_usage chown
    get_terminal_size which


namespace sh "Subprocesses, shell etc."
    Simple_Process_REPL.subcmd
    help
    do rm sleep environ do_cli_cmd do_cmd loop_cmd

namespace log "logger controls and messages"
    Simple_Process_REPL.logs
    help
    level info warning error critical debug

namespace dev "Device interaction, waiting for, handshaking."
    Simple_Process_REPL.device
    help
    wait handshake pause

namespace nw "Networking stuff, Wifi"
    Simple_Process_REPL.network
    help
    connect_wifi
    connect_tunnel create_tunnel sendlog

namespace bq "Bar and QR code generation, scanning and printing"
    Simple_Process_REPL.bar_qr
    help
    build_code_string
    gen_filename
    create
    save
    create_bar_code
    create_qr_code
    save_bar_code
    save_qr_code
    read_barcode_from_camera

namespace md "Markdown conversion to HTML"
    Simple_Process_REPL.markdown
    help
    html

namespace web "View HTML and urls."
    Simple_Process_REPL.webview
    help
    view
    browse

namespace pio "Particle.io Board CLI interface"
    Simple_Process_REPL.particle
    help
    get_w_timeout
    product_add
    name
    flash
    cmd
    id_cmd

namespace os "Python os library"
    os
    fchown lchown ctermid getcwd getcwdb link listdir
    lstat mkdir readlink rename replace rmdir system umask
    uname unlink remove getpid getpgrp getppid getuid getlogin
    kill killpg setuid sendfile fstat curdir pardir makedirs
    removedirs getenv

in-ns

# import new_spr into top level namespace.
import Simple_Process_REPL.mkext new_spr_extension_project

# Set up readme folder with stuff,
# then load the readme and convert to html.
with /readme

'
package: Simple_Process_REPL
filename: README.md
url: https://github.com/EricGebhart/Simple_Process_REPL/blob/main/README.md
title: "The SPR README!!!"


# load the resource at readme. put it in markdown.
# works because, 'with', readme has vars which match the function signature.
as/load-pkg-resource

# pop the last result to markdown.
pop results markdown

# convert the markdown to html, put it in html.
md/html

pop results html

# view-with and browse-with are handy to have.
# view and browse use the current 'with'...
def view-doc "Display the Readme documentation in an html viewer."
    with readme web/view

def browse-doc "Display the Readme documentation in a browser window."
    with readme web/browse

pop-with

with /wiki


'
url: https://github.com/EricGebhart/Simple_Process_REPL/wiki
title: The SPR Wiki


pop-with

as/-with-stack

def browse-wiki "Browse the SPR Wiki with your browser."
    with /wiki web/browse

with /home

'
msg: hello, welcome home.
