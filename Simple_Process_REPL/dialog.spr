def hello "message for when Autoexec is not set"
    ui/msg `~/config/dialogs/hellomsg

def start "message for start of Process"
    ui/msg `~/config/dialogs/plugin_start

def test "message for start of Test"
    ui/msg `~/config/dialogs/ready_to_test

def flash "message for start of Flash"
    ui/msg `~/config/dialogs/ready_to_flash

def failed "message for Process Failure"
    ui/msg `~/config/dialogs/process_failed

def finish "message for finish of Process"
    ui/msg `~/config/dialogs/process_finish

def clear "clear the screen"
    os/system "clear"

def continue_to_next
    "Do process again? Use message in _continue_next_"
    ui/yes_no `~continue_next

def with-ui
    "Add to with stack to pick up dialog message configuration."
    '
    - with /config/dialogs
    - with /config/print_commands



def choose-platform-command
    "Give a menu of format strings to choose based on /platform.
    place the result in 'command'. Commands should be a dictionary
    named after the value in '~platform'.
    we have the platform, we should be able to get the choices
    from /config/print_commands for the one we are on.
    ~/platform should resolve to Linux, Windows, or Darwin
    or who knows what else."
    '
    # put the map at ~platform in choices.
    - as/get-in-stack ~/platform
    - pop results choices

    # choose the command
    - ui/menu-map
    - pop results command



def format-filename-command
    "Use command to format a command using the value of filename as a format value."
    '
    #format the print command with the filename
    - as/-format command ~.filename
    - pop results command



# Set up the printer choices for the  platform and give a menu.
def get-filename-command
    "Choose a print command for this platform and format it with the value of command."
    '
    -  ui/choose-platform-command
    -  ui/format-filename-command



partial get-print-command
    "Different name wrapper.
    Use get-platform-command, with /config/print-commands to
    create a print command with the filename available."
    ui/get-filename-command


def get-count
    "Get how many into 'count'. Give an input count dialog and pop results to count."
    '
    - ui/input_count
    - pop results count



def get-count-loop-command
    "Get a count from an input dialog and do 'command' that many times."
    '
    - with /print-codes/input-count
    - ui/get-count
    - sh/loop-cmd
    - pop-with
